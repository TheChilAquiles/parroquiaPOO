# 🎯 CONTEXTO COMPLETO DEL PROYECTO PARROQUIA

## 📋 RESUMEN DEL PROYECTO

**Nombre:** Sistema de Gestión Parroquial  
**Tipo:** Aplicación web MVC simple con PHP 8+, PDO, MySQL  
**Ubicación:** Bogotá, Colombia  
**Estado:** En refactorización (30% completado)  
**Patrón:** MVC con Router centralizado, sin frameworks

---

## 🔄 REFACTORIZACIÓN REALIZADA

### Del Viejo Sistema (❌ NO USAR)
- `index.php` gigante con todo mezclado (3000+ líneas)
- Enrutamiento por `$_POST['menu-item']` y `$_POST['action']`
- URLs con `?menu-item=Noticias&action=crear`
- Lógica de negocio en vistas
- Validaciones inconsistentes

### Al Nuevo Sistema (✅ USAR)
- `index.php` limpio (40 líneas)
- `Router.php` centralizado con mapeo de rutas
- URLs limpias: `?route=noticias/crear`
- Controladores separados (16 nuevos)
- Modelos refactorizados (10 modelos)
- `.htaccess` con reescritura de URLs

---

## 📁 ESTRUCTURA FINAL DEL PROYECTO

```
proyecto/
├── index.php                    (NUEVO - simplificado)
├── Router.php                   (NUEVO - router centralizado)
├── .htaccess                    (ACTUALIZADO - reescritura de URLs)
├── Modelo/
│   ├── Conexion.php            (SIN CAMBIOS - Singleton PDO)
│   ├── ModeloUsuario.php       (REFACTORIZADO - 6 métodos)
│   ├── ModeloFeligres.php      (REFACTORIZADO - 4 métodos)
│   ├── ModeloLibro.php         (REFACTORIZADO - 3 métodos)
│   ├── ModeloCertificados.php  (REFACTORIZADO - 3 métodos)
│   ├── ModeloGrupo.php         (SIN CAMBIOS - 20+ métodos complejos)
│   ├── ModeloNoticia.php       (SIN CAMBIOS - CRUD + soft delete)
│   ├── ModeloDashboard.php     (REFACTORIZADO - estadísticas)
│   ├── ModeloParticipante.php  (REFACTORIZADO - CRUD simple)
│   ├── ModeloSacramento.php    (REFACTORIZADO - creación de sacramentos)
│   ├── ModeloPago.php          (NUEVO - 4 métodos)
│   └── ReporteModelo.php       (REFACTORIZADO - obtener reportes)
├── Controlador/
│   ├── HomeController.php      (NUEVO)
│   ├── LoginController.php     (NUEVO)
│   ├── RegistroController.php  (NUEVO)
│   ├── PerfilController.php    (NUEVO)
│   ├── DashboardController.php (NUEVO)
│   ├── LibrosController.php    (NUEVO)
│   ├── SacramentosController.php (NUEVO)
│   ├── CertificadosController.php (NUEVO)
│   ├── NoticiasController.php  (NUEVO)
│   ├── GruposController.php    (EXISTENTE - sin cambios)
│   ├── PagosController.php     (NUEVO)
│   ├── ReportesController.php  (NUEVO)
│   ├── ContactoController.php  (NUEVO)
│   ├── InformacionController.php (NUEVO)
│   ├── UsuarioController.php   (NUEVO)
│   ├── FeligresController.php  (REFACTORIZADO)
│   ├── ControladorDebug.php    (SIN CAMBIOS)
│   ├── ControladorGrupo.php    (EXISTENTE - no tocar aún)
│   └── ControladorNoticia.php  (EXISTENTE - no tocar aún)
├── Vista/
│   ├── componentes/
│   │   ├── link-menu.php       (REFACTORIZADO - sin formularios)
│   │   ├── menubar.php         (REFACTORIZADO - Alpine.js + Tailwind)
│   │   ├── plantillaTop.php    (REFACTORIZADO - alertas mejoradas)
│   │   └── plantillaBottom.php (REFACTORIZADO - footer mejorado)
│   ├── home.php                (❌ FALTA REFACTORIZAR)
│   ├── login.php               (❌ FALTA REFACTORIZAR)
│   ├── register.php            (❌ FALTA REFACTORIZAR)
│   ├── dashboard.php           (❌ FALTA REFACTORIZAR)
│   ├── noticias.php            (❌ FALTA REFACTORIZAR)
│   ├── grupos.php              (❌ FALTA REFACTORIZAR)
│   ├── libros.php              (❌ FALTA REFACTORIZAR)
│   └── (resto de vistas)       (❌ FALTA REFACTORIZAR)
├── assets/
│   ├── css/
│   ├── js/
│   └── img/
└── logs/
```

---

## 🔑 PUNTOS CRÍTICOS

### 1. REGLA DE ORO: NO TOCAR
- ❌ NO modificar `ControladorGrupo.php` existente
- ❌ NO tocar `ControladorNoticia.php` existente
- ❌ NO cambiar método `logIn()` en `LoginController.php` viejo
- ✅ SÍ usar nuevos controladores en `/Controlador/`

### 2. SISTEMA DE RUTAS (Router.php)
```php
// MAPEO CORRECTO
'ruta' => ['controlador' => 'NombreController', 'accion' => 'metodo']

// EJEMPLOS
'login/procesar' => ['controlador' => 'LoginController', 'accion' => 'procesar']
'noticias/guardar' => ['controlador' => 'NoticiasController', 'accion' => 'guardar']
'grupos/agregar-miembro' => ['controlador' => 'GruposController', 'accion' => 'agregarMiembro']
```

### 3. CONTROLADORES
Cada controlador debe:
- ✅ Tener constructor que carga modelo
- ✅ Separar lógica por método (crear/editar/eliminar/listar)
- ✅ Validar datos antes de pasar a modelo
- ✅ Usar `$_SESSION` para mensajes
- ✅ Retornar vistas con variables
- ✅ NO hacer queries directas (usar modelo)

### 4. MODELOS
Cada modelo debe:
- ✅ Extender o usar `Conexion::conectar()`
- ✅ Retornar arrays (nunca echo directo)
- ✅ Usar prepared statements
- ✅ Capturar excepciones PDO
- ✅ Loguear errores con `error_log()`
- ✅ Retornar arrays con 'status', 'message' en CRUD

### 5. FORMULARIOS EN VISTAS
```html
<!-- ❌ VIEJO (NO USAR) -->
<form method="POST" action="index.php">
    <input type="hidden" name="menu-item" value="Noticias">
    <input type="hidden" name="action" value="guardar">
</form>

<!-- ✅ NUEVO (USAR) -->
<form method="POST" action="?route=noticias/guardar">
    <!-- sin campos ocultos -->
</form>
```

### 6. DISEÑO (NO CAMBIAR)
- ✅ MANTENER clases de Tailwind CSS tal como están
- ✅ MANTENER colores: `bg-[#DFD3C3]`, `bg-[#F8EDE3]`, `bg-[#D0B8A8]`
- ✅ MANTENER Alpine.js para interactividad
- ✅ NO remover funcionalidades visuales existentes
- ✅ SOLO refactorizar lógica de rutas/formularios

---

## 📊 ESTADO DE VISTAS

### ✅ COMPLETADAS (Componentes)
- `plantillaTop.php` - Cabecera con alertas
- `plantillaBottom.php` - Footer
- `menubar.php` - Menú responsive con Alpine
- `link-menu.php` - Enlaces del menú

### ❌ PENDIENTES DE REFACTORIZAR (Vistas principales)
- `home.php` - Página de inicio
- `login.php` - Formulario de login
- `register.php` - Formulario de registro
- `dashboard.php` - Panel principal
- `noticias.php` - CRUD de noticias
- `grupos.php` - CRUD de grupos
- `libros.php` - Gestión de libros
- `certificados.php` - Generación de certificados
- `contacto.php` - Formulario de contacto
- `informacion.php` - Página informativa
- `datos-personales.php` - Perfil de usuario
- `reportes.php` - Reporte de pagos
- `pagos.php` - Gestión de pagos
- `sacramentos.php` - CRUD de sacramentos

---

## 🔐 SEGURIDAD IMPLEMENTADA

- ✅ Singleton para conexión PDO
- ✅ Prepared statements en todos los modelos
- ✅ htmlspecialchars() en salidas
- ✅ Validación de autenticación en Router
- ✅ Soft delete (borrado lógico)
- ✅ .htaccess bloquea `/Modelo/`, `/Controlador/`, `/logs/`
- ✅ Manejo de excepciones PDO
- ✅ Logging de errores en `logs/`

---

## 📝 ORDEN DE TAREAS PENDIENTES

### Fase 1: Verificación (ACTUAL)
1. ✅ Verificar que Router.php funciona
2. ✅ Confirmar .htaccess reescribe URLs
3. ✅ Probar rutas protegidas y públicas
4. ✅ Validar página 404 personalizada

### Fase 2: Vistas (PRÓXIMA)
1. Refactorizar `login.php` → usar `?route=login/procesar`
2. Refactorizar `register.php` → usar `?route=registro/procesar`
3. Refactorizar `dashboard.php` → importar estadísticas correctamente
4. Refactorizar `noticias.php` → CRUD con nuevas rutas
5. (Continuar con resto de vistas)

### Fase 3: Testing
1. Pruebas de funcionalidad CRUD
2. Pruebas de autenticación
3. Pruebas de seguridad
4. Optimización de rendimiento

---

## 🧪 COMANDOS Y PRUEBAS RÁPIDAS

### URLs para Probar
```
http://localhost/?route=inicio          (pública ✓)
http://localhost/?route=login           (pública ✓)
http://localhost/?route=login/procesar  (POST protegido)
http://localhost/?route=dashboard       (protegida - redirect si no autenticado)
http://localhost/?route=ruta-falsa      (404 personalizado)
```

### Bloqueos .htaccess (deben retornar 403)
```
http://localhost/Modelo/Conexion.php
http://localhost/Controlador/LoginController.php
http://localhost/logs/
```

### Base de Datos
- Host: `localhost`
- Usuario: `root`
- Contraseña: (vacía)
- Base de datos: `parroquia`
- Motor: MySQL 5.7+ o MariaDB

---

## 💡 PATRONES USADOS

### En Controladores
```php
// Patrón de validación y retorno
if (empty($datos)) {
    $_SESSION['error'] = 'Error';
    header('Location: ?route=...');
    exit();
}

// Patrón de crear/actualizar
if (empty($id)) {
    $resultado = $modelo->crear($datos);
} else {
    $resultado = $modelo->actualizar($id, $datos);
}
```

### En Modelos
```php
// Patrón de respuesta
return ['status' => 'success', 'message' => 'OK'];
return ['status' => 'error', 'message' => 'Error'];

// Patrón de soft delete
UPDATE tabla SET estado_registro = NOW() WHERE id = ?
```

### En Vistas
```php
// Menú dinámico
<?php foreach ($menu as $item): ?>
    <a href="?route=<?php echo $route; ?>">
        <?php echo htmlspecialchars($item); ?>
    </a>
<?php endforeach; ?>
```

---

## ⚠️ ERRORES COMUNES A EVITAR

1. ❌ Cambiar `$_SESSION['menu-item']` → Usar Router.php
2. ❌ POST a `index.php` → POST a `?route=...`
3. ❌ Validación en vista → Hacer en controlador
4. ❌ Queries directas en vista → Usar modelo
5. ❌ Echo en modelo → Retornar array
6. ❌ Sin try-catch en PDO → Siempre capturar excepciones
7. ❌ Rutas sin htmlspecialchars() → Sanitizar siempre
8. ❌ Nombres de controlador inconsistentes → Usar CamelCase
9. ❌ Modelos sin error_log → Siempre loguear errores
10. ❌ Tocar ControladorGrupo.php viejo → Dejar como está

---

## 📌 PRÓXIMA CONVERSACIÓN

**Cuando continúes, comienza preguntando:**
- "¿Pasaron todas las pruebas de Router?"
- "¿Está confirmado que .htaccess funciona?"
- "¿Qué vista refactorizamos primero?"

**Si hay problemas, pide:**
- Error exacto
- URL que falla
- Valores de `$_GET['route']`
- Contenido de logs

---

## 🎓 REFERENCIAS RÁPIDAS

**Router.php:** `/proyecto/Router.php` (centraliza todas las rutas)  
**index.php:** `/proyecto/index.php` (carga Router + plantillas)  
**.htaccess:** `/proyecto/.htaccess` (reescribe URLs sin index.php)  
**Controladores nuevos:** `/proyecto/Controlador/NombreController.php`  
**Modelos:** `/proyecto/Modelo/ModeloNombre.php`  
**Vistas:** `/proyecto/Vista/nombre.php`

---

**Estado actual:** 30% - Router + Modelos completos, Vistas pendientes  
**Tiempo estimado:** 5-7 horas más de desarrollo  
**Última actualización:** Esta sesión  
**Responsable:** Samuel Bedoya + Rusbel Godoy